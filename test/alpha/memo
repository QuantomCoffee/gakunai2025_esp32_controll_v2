movement形式


1バイト目: 0x58
固定です。

2バイト目: 3,4,5バイト目で送る内容を示します。

- 命令 -
0x00: 信号が不明/停止します [ 0x00, 0x00, 0x00, 0x00 ]
0x01: とりあえず生きてます

0x20: 足回りの平行移動 [ X成分* , Y成分* , 速度成分, 0x00 ]
0x21: 足回りの回転移動 [ 0x00,0x00, 時計回りの速度成分* ,0x00 ]
0x2f: 足回りを停止させます [0x00,0x00,0x00,0x00]

0x30: アーム先端の位置を変えます [ X座標*, Y座標*, Z座標*, 0x00 ] (相対)
0x31: アーム根本の位置を変えます [ 前後方向位置*, 速度上限%*, 0x00, 0x00 ]
0x32: アーム先端を開く、または閉じます [ 目標角度deg(2Byte), 開き具合%, 0x00 ]
0x3f: アーム操作を中断させます [0x00,0x00,0x00,0x00]

0x40: レールを操作します [ L速度*, R速度*, 0x00, 0x00 ]
0x4f: レールを停止させます [0x00,0x00,0x00,0x00]

0x70: オドメトリのデータを訂正します この場合は7バイト目まで使用します。
      [ x座標(2Byte), y座標(2Byte), 方向(1Byte)]

0x7f: エラー [0xff,0xff,0xff] -> コントローラーがつながってる場合赤く点滅させます

* -128～127に対し、128を加算して渡します。

- データ内容 -
errorは「直前に贈られた操作における状況」を入れます。
0x0?: 無効(有効操作なし)
0x1?: コントローラ操作有効
0x4?: 外部操作有効
0x6?: 外部操作切り替え中
0x?0: 成功
0x?7: 動作ミス
0x?f: エラー

0x80: 普通のデータを送ります。


0xfe: None 何も送りません。
0xff: エラー -> コントローラーがつながってる場合赤く点滅させます


3-6バイト目: データ
上記[]内の順番でデータを送ります。(2Byte)は 0x03FF => FF 03 のように上位ビットがずれることに注意。

7バイト目: 要求データ | エラーステータス
判断のためにデータを要求することができます。
要求するデータは上記2バイト目から0x80を減じた値で指定します。
現状は何ら余裕ないです。なので0x00

8バイト目: チェックサム
1バイト目から順に足したうえで下位1バイトを出力する。